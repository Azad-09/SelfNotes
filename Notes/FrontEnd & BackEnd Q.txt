
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::Answers:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

::HIBERNATE::

1. What is Hibernate?
Ans: Hibernate is an <Sub-FrameWork> of the Spring Framework which support <ORM> technology and helps us to establish a connection between the <Java Application> and the <Relational Database> so that we can put the OOP Model attributes to the database in the form of Table and its values. It uses <JDBC> under the hood and it reduces the codes related to establishing the connection so that the coder only concentrates on writing the logic. It also provides <HQL> which automatically creates a table in the database just by referring to the <Mapping> of the Model Class. 

2. What is ORM?
Ans: Object-Relational Mapping is used to convert the OOPs Model Object into a <Query> language so that it will convert the attributes so that it can store the data in a Table Format in a Database. Because the code is written in OOPs format and Database is supporting the Query language and this is known as the Impedance Mismatch, which can be avoided using the ORM technique.
 
3. What is ORM in Hibernate?
Ans: Hibernate is a Sub-Framework of Spring that uses the ORM technique to establish a connection between the Application and the Database. Hibernate add some extra features in the ORM technique which avoids the Impedance Mismatch between the 2 platforms and it also shortens our code and it also helps by Automatically Creating the Table in the Database using the HQL language. So the only work of a coder is to write the Business Logic and everything else should be taken care of by the Hibernate FW.

4. What are the advantages of using Hibernate over JDBC?
Ans: JDBC is Java Database Connectivity is an API and with the use of different classes and Interfaces of JDBC and using the JDBC <Driver> we can establish a connection with the <Relational Database> but just by using JDBC we can only able to connect the Database we still have to write the Query language to create a table in the database and to store the data. So it is going to be a Cumbersome process as Both the platform (JAVA and DATABASE) follow different languages to store their data so that Hibernate is Introduced so that we as a coder don't have to think about the connectivity as well as the Query language to create the tabby this process it Minimises the work of a coder as it provides certain technology which automatically does all the process and hence reduce the code as well as fastens the application and make the application light as we are using Spring Hibernate so it also uses the core properties of Spring that is <IOC> and <DI> which convert the Tightly coupled attributes to loosely coupled.

5. Explain Hibernate Framework?
Ans: Hibernate FW is the middle layer between the Java Application and Relational DataBase and its main motive is to store the Object data in the Table Format in a database and for that, it needs some Interfaces like
	a> Configuration Interface 
	b> SessionFactory Interface
	c> Session Interface
	d> Query & Criteria Interface
 
6. What are the core interfaces of Hibernate?
Ans: Core Interface
a> Configuration:- 
It is a process in which we write the code for establishing a connection with the Database where we mention different properties like <Driver><Dialect> etc hence it is known as the configuring stage of the application which provides all the information related to the connectivity.

b> SessionFactory:-
This is another Persisted Object which is a very <Heavyweight> object but it is <Thread Safe> hence <Multiple threads> can use this Object and we can store various Session inside this Session factory and we can call any Session by using the Object of SessionFactory, we can Instantiate the Object of SessionFactory whenever needed but it will hamper the processing of the Application and make the Application slow hence only Object of SessionFactory is created and is used multiple times to call the start an event or Session.

c> Session:- 
A session is nothing but an event that is started/ called by the user. Session is used to connect and transfer the desired data that the user demanded so whenever a request/event is created by the use the Session uses the Object of SessionFactory and start the Session and connect to the Database and do the update according to the demand.

d> Query:-
A query is a Persistence Object which help us to Automatically create the Table in the database using <HQL>.

7. List some of the databases supported by Hibernate.
Ans:
a> DB2
b> MySQL
c> Oracle
d> Sybase SQL Server
e> Informix Dynamic Server
f> HSQL
g> PostgreSQL
h> FrontBase

8. What is HQL?
Ans: Hibernate Query Language is a language offered by the Hibernate FW which is used to write the <Data Definition Language> (DDL) which is <Create> < Drop> all this query is used to create the table, drop the table automatically so that we don't have to write the query language even after establishing the connectivity with the database.

9. How to achieve mapping in Hibernate?
Ans: Mapping can be done by 2 process 
a> XML file:- 
We can use the XML file and can write the configuration as well as the SessionFactory along with the Mapping define inside the XML file using different tags and mention all the properties inside the <property> tag.

b> POJO Class:-
We can do the mapping process using annotation in the POJO classes like we can add different annotations like @Entity to specify a class as the Mapping class or the Persistence Class after that we also use the @Table to provide a name to the table according to our will and also we use the @Column tag to change the name of each column if we want to.

10. Name some of the important interfaces of Hibernate framework?
Ans:
a> Configuration:- 
It is a process in which we write the code for establishing a connection with the Database where we mention different properties like <Driver><Dialect> etc hence it is known as the configuring stage of the application which provides all the information related to the connectivity.

b> SessionFactory:-
This is another Persisted Object which is a very Heavyweight object but it is Thread Safe hence Multiple threads can use this Object and we can store various Session inside this Session factory and we can call any Session by using the Object of SessionFactory, we can Instantiate the Object of SessionFactory whenever needed but it will hamper the processing of the Application and make the Application slow hence only Object of SessionFactory is created and is used multiple times to call the start an event or Session.

c> Session:- 
The session is nothing but an event that is started/ called by the user. Session is used to connect and transfer the desired data that the user demanded so whenever a request/event is created by the use the Session uses the Object of SessionFactory and start the Session and connect to the Database and do the update according to the demand.

d> Query:-
A query is a Persistence Object which helps us to Automatically create the Table in the database using <HQL>.

11. What do you mean by Hibernate Configuration File?
Ans: It is a process in which we write the code for establishing a connection with the Database where we mention different properties like <Driver><Dialect> etc hence it is known as the configuring stage of the application which provides all the information related to the connectivity.

12. What is hibernate mapping file?
Ans: a> XML file:- 
We can use the XML file and can write the configuration as well as the SessionFactory along with the Mapping definer inside the XML file using different tags and mention all the properties inside the <property> tag.

b> POJO Class:-
We can do the mapping process using annotation in the POJO classes like we can add different annotations like @Entity to specify a class as the Mapping class or the Persistence Class after that we also use the @Table to provide a name to the table according to our will and also we use the @Column tag ignorer to change the name of each column if we want to.

13. Name some important annotations used for Hibernate mapping?
Ans: @Entity, @Table, @AutoGenerate @Column

14. Collections in Hibernate(What are the collection types in Hibernate)--New topic
15. What is the dialect in Hibernate	






::Spring::

1. What is Framework?
Ans:: FrameWork is an environment that is used for writing the code and it makes the process of writing and implementing the code easy. So for a new Beginner coder, it will be helpful to code with ease.
The framework consists of a <Coding Platform>, a <Compiler> to compile the code and <Tools> used in the Application and <API's> the in-build Interfaces which simplify and reduce the code

2. What is Spring Framework?
Ans:: Spring Framework is a Backend FW that is used by Java Application to reduce the complexity in making large <Enterprises Application>. It makes the application work smooth, faster, and most importantly makes the Application Lighter. It is Developed by Rod Jhonson.

3. What are the features of Spring Framework?
Ans:: Features of Spring FW are many but the Core Features are <POJO> class <DI> and <AOP>. Apart from that, many features make Spring FW one of the best FW of Backend.
<Open Source> Community Version of the Spring FW is easily available on the Web so it is easily accessible and anyone can use this FW
<LightWeight> With the help of Spring FW we can create a lightweight enterprise application as it relies on POJO classes and we don't need to inherit a method from other Classes and Interfaces and we use <DI> which prevent unnecessary memory allocation and that makes the application light. 
<FW of FW's> This is an FW that allows other FW to work under him without disturbing the flow and core implementation of the Spring FW. Examples are 	        Hibernate, MVC.

4. What is a Spring configuration file?
Ans:: This is an XML file that is a part of IOC Container it consists of <Meta-Data> along with the <BeanFactory> and <Beans> (nothing but the POJO class)
           and is known as the Configuration File because through this file the Objects were Created, Stored in a particular Memory Location and It also consists of the <DI> and here the <Wiring> of this Attributes is done by using either the <Property> tags or <Constructor args> and it also controls the                                 <LifeCycle> of the Beans as it can decide the Initialisation of the bean and also the destruction of the beans and it also decides the Scope of the Beans.

5. What do you mean by IoC (Inversion of Control) Container?
Ans:: IOC is a core feature of Spring FW and as the name suggest here the control completely depends upon the FW as with the Introduction of <DI> in                       Spring It helps the application to loosely couple the attributes which will save memory and avoid the reuse of the Objects of a particular class so instead of that a particular XML file is created where all the Objects are instantiated inside the IOC container and whenever needed they were used through wiring so here the control is completely in the hand of Spring FW and that is the reason why we call this as IOC.

6. What do you understand by Dependency Injection?	 
Ans:: Meaning of DI is understandable by its name as different Class / Object are dependent on each other like If there is a <Customer Class> then it should depend upon the <Address Class> as every person has addressed so here Customer is dependent on Address so to use the attributes of the address class we need to inject the Attributes through <Properties>  tag or <Constructor arg> tag which is known as <Wiring> or we can use           @AutoWire annotation if we are not using the Config.XML file.

7. Explain the difference between constructor and setter injection?
Ans:: DI AutoWiring can be done differently either we can Autowire the Attributes through Constructor or Setter Method. As both are the methods so to utilize Autowire we use the @Autowire annotation above the method so this is the only difference in the placement of this Annotation.

8. What are Spring Beans?
Ans:: Spring Beans are nothing but the POJO Classes which are inserted inside the Beans Tag or <BeanFactory> and inside BeanFactory these Objects are instantiated.

9. How is the configuration metadata provided to the spring container?
Ans:: Spring Container are done in an XML file where at first inside the <beans> tag all the <dependencies> and <services> are mentioned in XML format and after that <bean> tag are used to instantiate the bean or the POJO class.

10. What are the bean scopes available in Spring?
Ans:: There are different Bean Scope like <Singleton> where we assign the bean to be instantiated once only. <Prototype> can be instantiated more than once
           <Request> is used when the bean use HTTP request <Session> valid for HTTP session, and lastly <Global-Session> for global HTTP Session.

11.  Differentiate between BeanFactory and ApplicationContext.
Ans:: BeanFactory is an Interface that provides a Bean Container and it instantiates the object when requested. An ApplicationContext is an Interface that extends all the features of BeanFactory and has some extra miscellaneous tools which are helpful as it reduces the code and here the object is instantiated automatically.

12. What do you understand by @Autowired annotation?
Ans: Auto-wired Annotation is a process where the <DI> is done simply without using any tags in the XML file so we don't need to use the <property> tag or the <constructor arg> tags to wire the attributes.

13. What are the ways by which Hibernate can be accessed using Spring?



14. What is AOP?
Ans: Aspect-Oriented Programming is a paradigm like OOPS which mainly focuses on Aspects or in simple words on some services which can be used by any class at any time so that we don't have to write that code in the class again and again. These services are known as <Cross Cutting Concern> as these services can be called in between any other methods. 

Example::- When we try to place an order in any of the eCommerce sites it first asks for the login so here the login is the service that calls before the payment process and it shows without hampering our business logic.

15. Tight Coupling VS Loose Coupling
Ans: Tight Coupling is something when a particular Class is highly dependent on other Classes like when any one of the class is taking high responsibility like change in any one of class(Parent) will lead to change in the (child) another class is known as Tight Coupling.

Example:: Like Engine is the Parent class and Bike is the Child class so any change in the Parent Class leads to the change in the child class.

           Loose Coupling is a form of coupling where the coupling is done between two classes but they are not directly connected like in the POJO class we use private variables and to access this variable we need a <Getter> method and to set the value we need <Setter> value so here the private variable is not directly used or dependent with the other class and this is known as Loose Coupling.



:: SPRING BOOT::


16. What do you understand by the term ‘Spring Boot’?
Ans: Spring Boot is an <Open Source> in build <Standalone> framework of Spring and here we can use Spring Initializer and can decide all the details needed to build a Spring Framework like we can add different dependencies and also we can decide the <ArtifactId> and everything needed with a Spring FW and it will automatically build a Spring FW so we don't have to take the Headache of Building Spring Fw Manually.
 
17. Name Some of the Design Patterns Used in the Spring Framework?
Ans:
 
a> MVC Design Pattern:
Model View Controller is used by Spring FW in order to create a web-based application that separates the <Business Logic> and the <Persisted Data> so that we can focus more on the business logic and can use the data using <DAO> or <Services> and it also uses the core properties of Spring that is <IOC> and <DI>.

b> Factory Patterns:
Factory Patterns is used to load <Beans> (Model Class) by using <BeanFactory> and <ApplicationContext>.

c> Singelton Patter:
Used by Spring and it says that one and only one instance of a particular class will be created per <ClassHolder> whereas the default Scope of the beans is Singleton only.

d> Front Controller Pattern:
Front Controller or also known as the <Dispatcher Servlet> is used by the Spring FW as it handles all the incoming requests from the end-user. All the request is first delighted to the Front Controller as there are many entry points available in the Application so it is decided by the FC were to delegate the further information according to the request of the User.


18.  Explain the advantages of using Spring Boot for application development.
Ans: 
a> This FW is widely used to develop <REST API> as it shortens the code and provides the easiest way to develop <Web Application>
b> The primary feature of the Spring Boot is <AutoConfiguration>. It automatically configures the class based on the requirement. And it also creates <Standalone> application with less configuration and reduces boilerplate code. [Difference]
c> SB offers inbuilt <Embedded Server> which such as <Jetty> and <TomCat> helps to connect to the server. [Difference]
d> Spring Boot provide us with various <Plugins> for working with an embedded and <In-Memory Database> <H2>   [Difference]

19. Differentiate between Spring and Spring Boot.
Ans:
a> This FW is widely used to develop <REST API> as it shortens the code and provides the easiest way to develop <Web Application> [Difference]
b> The primary feature of the Spring Boot is <AutoConfiguration>. It automatically configures the class based on the requirement. And it also creates <Standalone> application with less configuration and reduces boilerplate code. [Difference]
c> SB offers inbuilt <Embedded Server> which such as <Jetty> and <TomCat> helps to connect to the server. [Difference]
d> Spring Boot provide us with various <Plugins> for working with an embedded and <In-Memory Database> <H2>   [Difference]

20. What does @SpringBootApplication annotation do internally?
Ans: By using this annotation we enable 3 more annotations that are 
a> @EnableAutoConfiguration:
It auto-configures the Spring Boot application mechanism.
b> @ComponentScan: 
It scan on the packages where the application is located.
c> @Configuration:
It allows registering more <Beans> in the context or import addition configuration classes.


:::: Spring Web MVC::::


21. What is the Spring MVC framework?
Ans: Spring MVC is an <Sub-FrameWork> of Spring FW and as the name suggests MVC stands for Model View and Controller. It is an <N-tier> FW where all the layers are separated from each other and that helps the coder to separate the <Business Logic> with the <Model Class> so that we can focus mainly on Business Logic and can also reuse the data which is available on the <View Class> as well as the <Services> and as it uses Spring core properties it uses <IOC> and <DI> and makes the application loosely coupled which make the application flexible and Web-ready.

22. What are the benefits of the Spring MVC framework over other MVC frameworks?
Ans: MVC FW is a design pattern that mainly focuses on Model Class, Controller, and the View Page, and here the Controller act as a <Mediator> between the Model Class and View Page where the Model class provide the persisted data from the Model Class and render it to the display using the View Page. But the only difference between MVC and Spring MVC is that in MVC we can't use the core properties of Spring that are <DI> and <IOC> and there are many other classes like <Handler Mapping> and <View Resolver> which is used in Spring MVC.
    
23. What is DispatcherServlet in Spring MVC?
Ans: DispatcherServlet is also known as the <Front Controller> which is the first layer of the MVC pattern which accept all the request from the user. All the requests are delegated to the Front Controller first as there are various entry points available in an application in order to avoid confusion this layer is used and it further delegates the request to other layers according to the need and demand.

24. Explain Spring MVC architecture?
Ans: MVC Architecture:
a> Front Controller/DispatcherServlet::
- As the name suggests it is the first layer or the front layer which accept all the request coming from the end-user and this is the <Master Layer> as it interacts with every layer. So it acts as an entry point in MVC.

b> Handler Mapping:
- After the Front-Controller gets a request from the end-user it consults the <Handler Mapping> before entering into the Controller class as Controller Class consist of all the Mappings along with their <Business Logic> so Handler Mapping Class decide the Mapping according to the request of the user and Handle the process of Mapping for the Front Controller.

c> Controller:
- Controller Class consist of all the mapping along with the Business Logic and it act as the middle layer or the Mediator between the Model Class and View Page. It Collect <Data> from the Model Class and also the <Name> of the <View Page> and pass it back to the Front Controller.

d> View Resolver:
- After getting the View name it find the <Server Template> for the same name and add the data as well as the server name inside the <Jakarta Server Pages> (JSP) and give the response back to the Front Controller which render the view page to the end user.

25. How to Get ServletContext and ServletConfig Objects in a Spring Bean?

26. What Is a Controller in Spring MVC?
Ans: Controller Class consist of all the mapping along with the Business Logic and it act as the middle layer or the Mediator between the Model Class and View Page. It Collect <Data> from the Model Class and also the <Name> of the <View Page> and pass it back to the Front Controller.

27. How Does the @RequestMapping Annotation Work?
Ans: @Request Mapping is an annotation used in a Controller Class because it handles all the Mapping like <Get><Post><Delete><Update> so Request Mapping convert the Http request to a Class and pick the correct Request that the user demanded for.

28. What is a View Resolver pattern and explain its significance in Spring MVC?
Ans:The <DispatcherServlet>  get the <Persisted Data Object> and the <Name> of the View from the <Controller Class>. After getting the View name it find the <Server Template> for the same name and add the data as well as the server name inside the <Jakarta Server Pages> (JSP) and give the response back to the Front Controller which render the view page to the end user. 

29. What is the Model in Spring MVC?
Ans: Model Class or the Domain Class is nothing but the <POJO> Class which contain all the <Persisted Data> and from which the Controller get the data according to the request by the end user and give back to the Front Controller which will be again forwarded to the View Resolver .

30. What is the role of @ModelAttribute annotation?


ANGULAR::::


1. Why were client-side frameworks like Angular introduced?
Ans: Client-Side framework are used to create <Dynamic> and <Interesting Web Front-End> application which is used to create <Single Page Application> where within a page different components were used and they are reloaded without reloading the Web-Page.
 
2. What is TypeScript?
Ans: Typescript is a <Scripting Language> which is used to write code for Web-Application (Server Side Application), JavaScript is a <Client Side> Programming Language which has so many useful features but it was heavy and complex and <Dynamic> that makes the downfall of JS in succeeding in <Enterprises Level> as server-side technology, So in order to Bridge the gap we use TypeScript which is a Client-Side as well as Server-Side Programming Language which support OOPS.

FEATURES::
A> TypeScript code is not natively interpreted by the browser, so the code is written in TypeScript format and then compiled and converted to JS and this process is known as <Transpulation>. and after that, the browser is able to read the JS.

B> JS is TypeScript that is a JS file that can be completely converted to TypeScript just by changing the extension of the file from <.js> to <.ts> but the vice-versa is not possible.

C>TypeScript can be run on any Environment like Windows, Machnitos, Linux, etc, it is independent of the distributed Environment. And it support JS libraries too.

DIFFERENCE::
A> JavaScript is a <Client-Side> Scripting language that does not support OOPS and the dataType here is <Dynamic> whereas TypeScript is both <Client-Side> as well as <Server-Side> Scripting Language which supports OOPS and here the dataType is Static(Strongly-Typed Language).

B> TypeScript support <Interfaces> but JS does'nt.

ADVANTAGES::

A> Before Compilation of the code it will show the error if there is an error in the <Data Type>. Because of that, we face very few errors during the Run-Time period of the code.

B>TypeScript support static/strongly-typed. This means that type correctness can be checked at compile-time and this feature is not available in JavaScript.
 
3. What is Angular? Why was it introduced?
Ans: **Angular is a Front-End Platform and Framework that is used for the formation of <Single Page Application> with the help of the <Mark-Up> language like HTML, CSS/ Open-Source front-end toolkits like Bootstrap, etc and Programming Language like <TypeScript>. 

** Single Page Application is that application where a single page consists of different working and functional <Components> and are independent of each other but can interact with each other when needed and using a single component will not reload the whole page as we are not going to redirect to another Web-Page and that is the reason why it is known as Single Page Application.
 
4. How does an Angular application work?
Ans: Angular is a <Development Platform> built on TypeScript, 
** It is  a <Component-based > framework for building scalable Web Application
** It is a collection of well-integrated <Libraries> that cover a wide variety of features like <Routing>, <Forms Managment>, <Client-Server communication and many more

5. What's the difference between Angular and AngularJS?
Ans:

AngularJS:-
** It supports <Model View Controller> (MVC) as a working Architecture.
** The programming language which is used in AngularJS is JavaScript which is Dynamically Typed.
** It doesn't support <Mobile Browser>.
** It is less Manageable than the Angular FrameWork.

Angular:-
** It uses <Components> and <Directives> as  a working architecture.
** The programming language which is used in Angular is TypeScript which is Statically Typed (Strongly-Typed) which is a superset of EchmaScript6 (ES6).
** It is supported by all types of Mobile Browser.
** It is more manageable as compared to AngularJs.
 
6. What is data binding?
Ans: Data Binding is a process in Angular in which the Data is <Synced> between the Components which consist of the <Business Logics> and the View which is nothing but the HTML and CSS for Styling and it decides the User Interface as well as the logic Implementation through Data Binding.

** Data Binding can be done in 2 ways
A> One-Way DB:- In this process, the data from the Components is binded to the HTML, and here we can display/manipulate the View Page According to the Components Business Logics but the Vice Versa is not possible.

B> Two-Way DB:- In this process, we can manipulate the View page according to the Business logic as well as we can manipulate the Components after getting input from the End-User.

7. What are Single Page Applications (SPA)?
Ans: Single Page Applications are applications where different functioning parts are available on a Single Page and these functioning parts are known as the <Components> of this page. Here the components are independent of each other but can communicate with each other if needed, and working or using any one particular component will not go to disturb the whole page which means the whole page is not going to Reload if we click on any particular Component and it will not going to redirect to a new Web-Page and due to which it is known as Single Page Application, and due to this property the load time and the working speed of this application is very much high as compared to Multiple Page Application. 

 
8. What are decorators in Angular?
Ans: As the name suggests Decorators are written above a particular Class, Methods, Property, Accessor, Parameter as a decorative way and it add some extra features and some special kind of declaration to that particular Class, Methods wherever they are used.

10. Explain Components, Modules, and Services in Angular
Ans: ** Components are the functional unit of a Web Page, Collection of Components are required to create a Single Page Application and each component are assigned with different works and they do that particular work properly Each component are independent of each other and if needed they interact with each other or collaborate in order to do a particular work.

** Modules is an inbuilt section in Angular which we can get using Angular CLI and it consist of the details about all the Imports and all the Components mentioned inside the Angular Project.

** Services are also a 
11. How does one share data between components in Angular?
12. Explain the concept of Dependency Injection?
13. Mention some advantages of Angular.
14. What are Directives in Angular?
15. What are Components in Angular?
16. What is an ngModule?
17. What is String Interpolation in Angular?
18. What are Promises and Observables in Angular? how it is differentiated?
19. What are Template and Reactive forms?
20. What is Angular Router?


   




 
 